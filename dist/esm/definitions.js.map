{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAsBA,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,kCAAe,CAAA;AACjB,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AACD,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,oCAAqB,CAAA;IACrB,wCAAyB,CAAA;IACzB,8BAAe,CAAA;IACf,2BAAY,CAAA;AACd,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface UrlEvent {\n  /**\n   * Emit when the url changes\n   *\n   * @since 0.0.1\n   */\n  url: string;\n}\nexport interface BtnEvent {\n  /**\n   * Emit when a button is clicked.\n   *\n   * @since 0.0.1\n   */\n  url: string;\n}\n\nexport type UrlChangeListener = (state: UrlEvent) => void;\nexport type ConfirmBtnListener = (state: BtnEvent) => void;\n\nexport enum BackgroundColor {\n  WHITE = 'white',\n  BLACK = 'black',\n}\nexport enum ToolBarType {\n  ACTIVITY = 'activity',\n  NAVIGATION = 'navigation',\n  BLANK = 'blank',\n  DEFAULT = '',\n}\n\nexport interface Headers {\n  [key: string]: string;\n}\n\nexport interface OpenOptions {\n  url: string;\n  headers?: Headers;\n  isPresentAfterPageLoad?: boolean;\n}\n\nexport interface DisclaimerOptions {\n  title: string;\n  message: string;\n  confirmBtn: string;\n  cancelBtn: string;\n}\n\nexport interface OpenWebViewOptions {\n  url: string;\n  headers?: Headers;\n  shareDisclaimer?: DisclaimerOptions;\n  toolbarType?: ToolBarType;\n  shareSubject?: string;\n  title: string;\n  backgroundColor?: BackgroundColor;\n  isPresentAfterPageLoad?: boolean;\n}\n\n// CapBrowser.addListener(\"urlChangeEvent\", (info:  any) => {\n//   console.log(info.url)\n// })\n\n// CapBrowser.addListener(\"confirmBtnClicked\", (info:  any) => {\n//   // will be triggered when user clicks on confirm button when disclaimer is required, works only on iOS\n//   console.log(info.url)\n// })\nexport interface InAppBrowserPlugin {\n  open(options: OpenOptions): Promise<any>;\n  close(): Promise<any>;\n  openWebView(options: OpenWebViewOptions): Promise<any>;\n  setUrl(options: { url: string }): Promise<any>;\n  /**\n   * Listen for url change\n   *\n   * @since 0.0.1\n   */\n  addListener(\n    eventName: 'urlChangeEvent',\n    listenerFunc: UrlChangeListener\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for close click\n   *\n   * @since 0.4.0\n   */\n  addListener(\n    eventName: 'closeEvent',\n    listenerFunc: UrlChangeListener\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Will be triggered when user clicks on confirm button when disclaimer is required, works only on iOS\n   *\n   * @since 0.0.1\n   */\n  addListener(\n    eventName: 'confirmBtnClicked',\n    listenerFunc: ConfirmBtnListener\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n"]}